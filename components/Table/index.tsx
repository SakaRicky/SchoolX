import React, { useState } from 'react';
import { makeStyles, TextField } from '@material-ui/core';
import { DataGrid, GridColDef, GridValueGetterParams } from '@material-ui/data-grid';
import styles from 'styles/table.module.scss';
import { StudentOnClassList, Teacher } from 'types';
import CloseIcon from '@material-ui/icons/Close';
import Link from 'next/link';

const useStyles = makeStyles(theme => {
    return {
        grid: {
            borderTopRightRadius: '10px',

            '& .MuiDataGrid-columnHeaderWrapper': {
                backgroundColor: theme.palette.secondary[100],
                fontSize: "1rem",
                fontWeight: '700',
            },
            '& .MuiDataGrid-dataContainer': {
                color: theme.palette.myGrey[800]
            },

            '& .MuiDataGrid-footerContainer': {
                

                '& .MuiSvgIcon-root': {
                    backgroundColor: theme.palette.secondary[100],
                    borderRadius: '50%',
                    transition: theme.transitions.create(['background-color', 'transform'], {
                        duration: theme.transitions.duration.standard,
                    }),

                    '&:hover': {
                        backgroundColor: theme.palette.secondary[300],
                        transform: 'scale(1.1)'
                    }
                }
            }
        },
        textField: {
            border: '2px solid theme.palette.secondary[300]'
        }
    }
})
interface TableProps {
    tableData: StudentOnClassList[]
}

export const Table = ({tableData}: TableProps) => {

    const [searchText, setSearchText] = useState<string>("");
    const [editUser, setEditUser] = useState<Teacher>();

    const classes = useStyles();



    console.log(tableData);



    const columns: GridColDef[] = [
        { field: 'id', headerName: 'ID', width: 100 },
        // ID and matricule should be different and matricule
        // is generated by the server. For now it's absent so we use ID
        // to simulate it
        {
          field: 'matricule',
          headerName: 'Matricule',
          width: 150,
          editable: true,
        },
        {
          field: 'full_name',
          headerName: 'Full Names',
          description: 'This column has a value getter and is not sortable.',
          sortable: false,
          width: 200,
          valueGetter: (params: GridValueGetterParams) =>
            `${params.getValue(params.id, 'first_name') || ''} ${
              params.getValue(params.id, 'last_name') || ''
            }`,
        },
        {
            field: 'date_of_birth',
            headerName: 'Date of birth',
            width: 150,
            editable: true,
        },
        {
            field: 'gender',
            headerName: 'Gender',
            width: 130,
            editable: true,
        },
        {
            field: 'fathers_name',
            headerName: `Father's Name`,
            width: 170,
            editable: true,
        },
        {
            field: 'fathers_contact',
            headerName: `Father's Contact`,
            width: 200,
            editable: true,
        },
      ];

    // filter according to search state or return the whole data
    const filteredData = searchText ? tableData.filter(data => {
        return data.first_name.includes(searchText)
    }) : tableData;


    const handleSearchCancel = () => {
        setSearchText("");
    }

    const rows = filteredData?.map((content, index) => {        
        // <Link href={`teachers/${content.id}`} passHref={true}></Link>
        return { 
            id: index,
            matricule: content.id,
            first_name: content.first_name,
            last_name: content.last_name,
            date_of_birth: content.date_of_birth,
            gender: content.gender,
            fathers_name: content.fathers_name,
            fathers_contact: content.fathers_phone
        } // { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },
    }); 

    return (
        <>
            <div className={styles.root}>
                
                <div className={styles.tableWrappe}>
                    <div className={styles.filter}>
                        <input
                            type="text"
                            placeholder="Type to search from list"
                            className={styles.textField}
                            value={searchText}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchText(e.target.value)}
                        />
                        <span onClick={handleSearchCancel}><CloseIcon /></span>
                    </div>
                    <div className={styles.table}>
                        <DataGrid
                            className={classes.grid}
                            rows={rows}
                            columns={columns}
                            pageSize={5}
                            checkboxSelection
                            disableSelectionOnClick
                        />
                    </div>
                </div>
            </div>
        </>
    )
}

